generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(255)
  content     String      @db.Text
  thumbnail   String?     @db.VarChar(255)
  publishedAt DateTime?   @db.Timestamp(6)
  authorId    String      @db.Uuid
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  updatedAt   DateTime    @default(now()) @db.Timestamp(6)
  slug        String
  deletedAt   DateTime?   @db.Timestamp(6)
  User        User        @relation(fields: [authorId], references: [id])
  PostAsset   PostAsset[]

  @@index([title, authorId])
  @@map("posts")
}

model User {
  id          String        @unique @db.Uuid
  name        String        @db.VarChar(50)
  email       String        @unique @db.VarChar(50)
  password    String        @default("0") @db.VarChar(255)
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime      @default(now()) @db.Timestamp(6)
  deletedAt   DateTime?     @db.Timestamp(6)
  posts       Post[]
  ProjectUser ProjectUser[]

  @@map("users")
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  description String        @db.Text
  thumbnail   String?       @db.VarChar(255)
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime      @default(now()) @db.Timestamp(6)
  deletedAt   DateTime?     @db.Timestamp(6)
  Task        Task[]
  ProjectUser ProjectUser[]

  @@map("projects")
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String    @db.Text
  projectId   Int
  statusId    Int       @unique
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6)
  deletedAt   DateTime? @db.Timestamp(6)

  project Project @relation(fields: [projectId], references: [id])
  status  Status  @relation(fields: [statusId], references: [id])

  @@index([title])
  @@map("tasks")
}

model Status {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String    @db.Text
  color       String    @db.VarChar(255)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6)
  deletedAt   DateTime? @db.Timestamp(6)
  Task        Task?

  @@map("statuses")
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  description String        @db.Text
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime      @default(now()) @db.Timestamp(6)
  deletedAt   DateTime?     @db.Timestamp(6)
  ProjectUser ProjectUser[]

  @@map("roles")
}

model ProjectUser {
  userId    String  @db.Uuid
  projectId Int
  roleId    Int
  Project   Project @relation(fields: [projectId], references: [id])
  User      User    @relation(fields: [userId], references: [id])
  Role      Role    @relation(fields: [roleId], references: [id])

  @@id([projectId, userId])
  @@map("project_users")
}

model Asset {
  id        Int         @id @default(autoincrement())
  url       String
  type      String
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  updatedAt DateTime    @default(now()) @db.Timestamp(6)
  deletedAt DateTime?   @db.Timestamp(6)
  PostAsset PostAsset[]

  @@map("assets")
}

model PostAsset {
  postId  Int
  assetId Int
  Post    Post  @relation(fields: [postId], references: [id])
  Asset   Asset @relation(fields: [assetId], references: [id])

  @@id([postId, assetId])
  @@map("post_assets")
}

model Meta {
  id        Int       @id @default(autoincrement())
  key       String    @db.VarChar(50)
  value     String
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
}
